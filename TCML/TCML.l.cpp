#define yy_create_buffer TCML_create_buffer
#define yy_delete_buffer TCML_delete_buffer
#define yy_scan_buffer TCML_scan_buffer
#define yy_scan_string TCML_scan_string
#define yy_scan_bytes TCML_scan_bytes
#define yy_flex_debug TCML_flex_debug
#define yy_init_buffer TCML_init_buffer
#define yy_flush_buffer TCML_flush_buffer
#define yy_load_buffer_state TCML_load_buffer_state
#define yy_switch_to_buffer TCML_switch_to_buffer
#define yyin TCMLin
#define yyleng TCMLleng
#define yylex TCMLlex
#define yyout TCMLout
#define yyrestart TCMLrestart
#define yytext TCMLtext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
/*#include <unistd.h>*/

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
static yyconst short int yy_accept[399] =
    {   0,
        0,    0,    0,    0,    0,    0,   89,   88,   85,    1,
        6,   12,   86,    9,   11,   10,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,    5,    4,    5,
        8,    7,   85,    2,   86,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   44,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       26,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   43,   87,   41,   87,   87,   87,   87,

       87,    3,   87,   45,   39,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   61,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   79,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   40,   49,   19,   87,   87,   87,   87,
       62,   87,   87,   14,   87,   87,   87,   87,   87,   87,
       47,   87,   87,   20,   87,   87,   87,   87,   87,   31,

       32,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   13,   27,   87,   87,   87,   87,   87,   87,   87,
       87,   38,   87,   46,   87,   87,   64,   21,   87,   87,
       87,   87,   87,   87,   87,   60,   87,   87,   87,   15,
       23,   87,   87,   42,   87,   87,   87,   87,   87,   87,
       78,   87,   87,   87,   87,   87,   87,   87,   87,   28,
       87,   87,   80,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   33,   17,   87,   87,   87,   87,   87,   25,
       87,   87,   37,   87,   87,   87,   34,   87,   87,   87,
       68,   51,   87,   54,   87,   87,   87,   87,   87,   52,

       18,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   67,   71,   87,   87,   87,   35,   36,
       87,   87,   77,   87,   87,   57,   87,   87,   87,   87,
       87,   87,   74,   87,   87,   87,   87,   87,   22,   63,
       82,   87,   87,   87,   56,   87,   87,   53,   50,   87,
       76,   29,   87,   55,   87,   87,   83,   87,   87,   87,
       87,   87,   87,   87,   48,   30,   87,   16,   87,   24,
       87,   87,   87,   58,   87,   70,   87,   59,   69,   87,
       65,   87,   87,   87,   87,   81,   87,   66,   87,   87,
       84,   87,   72,   87,   73,   87,   75,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    2,    1,    1,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    1,    8,
        9,   10,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   20,
        1,    1,    1,    1,   36,    1,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[37] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[402] =
    {   0,
        0,    0,   34,   35,   38,   40,  406,  407,  403,  407,
      407,  399,  396,  407,  407,  407,  380,   34,   35,   36,
       38,   38,  390,   53,   56,    0,   56,  385,   19,   62,
      368,  385,   59,   80,   70,   83,   39,  407,  407,  391,
      407,  407,  394,  407,  388,    0,  375,  365,  362,  361,
      362,  378,  369,   78,  365,  370,  356,  351,  358,  363,
       72,  368,  367,  355,  367,  346,   66,  365,  343,  361,
        0,  362,   92,  350,   80,  341,  351,  339,  339,  337,
      337,  354,  342,  335,  340,  330,   60,   85,  348,  336,
      324,  331,  331,    0,  341,    0,  326,  342,  339,  332,

      336,  407,  332,    0,    0,  318,  332,  318,  319,  319,
       96,  330,   99,  331,  317,  314,  309,  326,  322,  325,
      320,  304,  310,  315,  317,  313,  301,  313,  299,  309,
      303,  301,  304,  307,  291,  305,  304,  292,  288,  303,
       79,  293,  295,  288,  299,  287,  280,  290,    0,  293,
      104,  285,  276,  289,  282,  288,  272,  273,  272,  282,
      268,  273,  271,  265,  265,  267,  264,  266,  265,  267,
      257,  263,  274,  263,    0,    0,  262,  255,  256,  103,
        0,  266,  265,    0,  261,  261,  249,  251,  260,  255,
        0,  260,  105,    0,  244,  247,  242,  236,  250,    0,

        0,  248,  253,  243,  246,  249,  247,  240,  232,  246,
      228,    0,    0,  232,  226,  227,  235,  236,  227,  233,
      232,    0,  225,    0,  233,  219,    0,    0,  222,  226,
      222,  228,  220,  222,  225,    0,  224,  216,  226,    0,
        0,  206,  216,    0,  212,  211,  219,  210,  205,  203,
        0,  198,  212,  201,  214,  194,  202,  200,  210,    0,
      208,  204,  196,  187,  188,  191,  195,  191,  199,  192,
      188,  179,    0,    0,  178,  192,  191,  192,  174,    0,
      188,  173,    0,  178,  172,  176,    0,  174,  175,  177,
        0,    0,  162,    0,  183,  180,  164,  167,  155,    0,

        0,  165,  157,  162,  171,  166,  162,  153,  156,  162,
      169,  155,  156,    0,    0,  164,  152,  154,    0,    0,
      144,  158,    0,  157,  156,    0,  141,  145,  138,  148,
      152,  151,    0,  147,  133,  131,  129,  128,    0,    0,
        0,  135,  136,  142,    0,  137,  125,    0,    0,  130,
        0,    0,  123,    0,  133,  122,    0,  134,  134,  118,
      117,  131,  130,  129,    0,    0,  114,    0,  112,    0,
      116,  116,  123,    0,  108,    0,  110,    0,    0,  112,
        0,  106,  104,  105,  102,    0,  100,    0,  100,  104,
        0,   97,    0,   98,    0,   45,    0,  407,  136,  138,

       57
    } ;

static yyconst short int yy_def[402] =
    {   0,
      398,    1,  399,  399,  400,  400,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  398,  398,  398,
      398,  398,  398,  398,  398,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  398,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,    0,  398,  398,

      398
    } ;

static yyconst short int yy_nxt[444] =
    {   0,
        8,    9,   10,   11,    8,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       26,   27,   28,   26,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   26,   26,    8,   39,   39,   40,   40,
        8,   42,    8,   42,   48,   51,   77,   55,   63,   78,
       56,   60,   52,  100,   57,   49,   53,  101,   46,   54,
       58,   61,   64,   59,   50,   65,   62,   67,   74,   71,
      147,   84,   79,   85,   75,   68,  125,   69,   72,  397,
       80,   70,  118,   86,  126,   73,   81,  148,   87,   88,
       89,   94,   90,   95,   91,   96,  149,   97,   92,  110,

      111,  119,  131,  134,   93,   98,  132,  168,  135,  171,
      150,   99,  200,  201,  210,  238,  211,  172,  249,  396,
      395,  169,  394,  393,  392,  391,  239,  390,  389,  388,
      387,  386,  385,  384,  383,  250,   38,   38,   41,   41,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,

      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,

      218,  217,  216,  215,  214,  213,  212,  209,  208,  207,
      206,  205,  204,  203,  202,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  173,  170,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  133,  130,  129,  128,  127,  124,  123,  122,  121,
      120,  117,  116,  115,  114,  113,  112,  109,  108,  107,
      106,  105,  104,  103,   45,   43,  102,   83,   82,   76,

       66,   47,   45,   44,   43,  398,    7,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398
    } ;

static yyconst short int yy_chk[444] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    3,    4,
        5,    5,    6,    6,   18,   19,   29,   20,   22,   29,
       20,   21,   19,   37,   20,   18,   19,   37,  401,   19,
       20,   21,   22,   20,   18,   22,   21,   24,   27,   25,
       87,   33,   30,   33,   27,   24,   67,   24,   25,  396,
       30,   24,   61,   33,   67,   25,   30,   87,   33,   33,
       34,   35,   34,   35,   34,   35,   88,   36,   34,   54,

       54,   61,   73,   75,   34,   36,   73,  111,   75,  113,
       88,   36,  141,  141,  151,  180,  151,  113,  193,  394,
      392,  111,  390,  389,  387,  385,  180,  384,  383,  382,
      380,  377,  375,  373,  372,  193,  399,  399,  400,  400,
      371,  369,  367,  364,  363,  362,  361,  360,  359,  358,
      356,  355,  353,  350,  347,  346,  344,  343,  342,  338,
      337,  336,  335,  334,  332,  331,  330,  329,  328,  327,
      325,  324,  322,  321,  318,  317,  316,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  299,
      298,  297,  296,  295,  293,  290,  289,  288,  286,  285,

      284,  282,  281,  279,  278,  277,  276,  275,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      259,  258,  257,  256,  255,  254,  253,  252,  250,  249,
      248,  247,  246,  245,  243,  242,  239,  238,  237,  235,
      234,  233,  232,  231,  230,  229,  226,  225,  223,  221,
      220,  219,  218,  217,  216,  215,  214,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  199,  198,  197,
      196,  195,  192,  190,  189,  188,  187,  186,  185,  183,
      182,  179,  178,  177,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  160,  159,

      158,  157,  156,  155,  154,  153,  152,  150,  148,  147,
      146,  145,  144,  143,  142,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  112,  110,  109,  108,  107,  106,  103,  101,
      100,   99,   98,   97,   95,   93,   92,   91,   90,   89,
       86,   85,   84,   83,   82,   81,   80,   79,   78,   77,
       76,   74,   72,   70,   69,   68,   66,   65,   64,   63,
       62,   60,   59,   58,   57,   56,   55,   53,   52,   51,
       50,   49,   48,   47,   45,   43,   40,   32,   31,   28,

       23,   17,   13,   12,    9,    7,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "TCML.l"
#define INITIAL 0
#line 3 "TCML.l"
#include <string.h>
#include <stdlib.h>
#include "cinterf.h"
#include "TCML.cpp.h"

int tcml_attr = 0;
int tcml_line = 0;
int tcml_buf_idx = 0;
unsigned char tcml_type = 0;
char tcml_buf[MAX_TCML_SYMBOL] = "";
char tcml_identifier[MAX_TCML_SYMBOL] = "";

void reset_lex()
{
	tcml_attr = 0;
	tcml_line = 0;
	tcml_buf_idx = 0;
	tcml_type = 0;
	memset( tcml_buf, 0, MAX_TCML_SYMBOL);
	memset( tcml_identifier, 0, MAX_TCML_SYMBOL);
}

void clean_lex_buf()
{
	if(yy_current_buffer)
	{
		free(yy_current_buffer->yy_ch_buf);
		free(yy_current_buffer);
	}	
}
#define IN_COMMENT 1

#define IN_STRING 2


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 48 "TCML.l"


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 399 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 407 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 49 "TCML.l"
{
						tcml_line++;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "TCML.l"
{
						BEGIN IN_COMMENT;
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "TCML.l"
{
						BEGIN 0;
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "TCML.l"
{
						tcml_line++;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "TCML.l"
{/*Eat up all string in comment*/}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "TCML.l"
{
						tcml_buf_idx = 0;
						memset(tcml_buf, '\0', MAX_TCML_SYMBOL);
						BEGIN IN_STRING;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "TCML.l"
{			
						strcpy(TCMLlval.string_value, tcml_buf);	
						BEGIN 0;
						
						return STRING;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "TCML.l"
{
						if(tcml_buf_idx < MAX_TCML_SYMBOL-1)
							tcml_buf[tcml_buf_idx++] = yytext[0];
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "TCML.l"
{return BRACKET_OPEN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "TCML.l"
{return BRACKET_CLOSE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "TCML.l"
{return SET;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "TCML.l"
{return SLASH;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "TCML.l"
{return TCML;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "TCML.l"
{return HEAD;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "TCML.l"
{return FRAME;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "TCML.l"
{return COMPONENT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "TCML.l"
{return BUTTON;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "TCML.l"
{return SCROLL;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "TCML.l"
{return EDIT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "TCML.l"
{return LIST;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "TCML.l"
{return COMBO;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "TCML.l"
{return TABCTRL;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "TCML.l"
{return GAUGE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "TCML.l"
{return IMAGELIST;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "TCML.l"
{return DEFINE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "TCML.l"
{return ID;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "TCML.l"
{return TEXT_DEF;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "TCML.l"
{return SOUND;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "TCML.l"
{return HMARGINE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "TCML.l"
{return VMARGINE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "TCML.l"
{return POSX;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "TCML.l"
{return POSY;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "TCML.l"
{return WIDTH;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "TCML.l"
{return HEIGHT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "TCML.l"
{return DEFAULT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "TCML.l"
{return DISABLE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "TCML.l"
{return ENABLE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "TCML.l"
{return ALIGN;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "TCML.l"
{return BLT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "TCML.l"
{return DOWN;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "TCML.l"
{return UP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "TCML.l"
{return HOVER;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "TCML.l"
{return UPLEFT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "TCML.l"
{return DOWNRIGHT;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "TCML.l"
{return BAR;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "TCML.l"
{return CARET;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "TCML.l"
{return ITEM;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "TCML.l"
{return VERTICAL;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "TCML.l"
{return DROP;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "TCML.l"
{return DOWNLIST;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "TCML.l"
{return LCLICK;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "TCML.l"
{return RCLICK;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "TCML.l"
{return DBLCLICK;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "TCML.l"
{return LINEUP;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "TCML.l"
{return LINEDOWN;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "TCML.l"
{return VSCROLL;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "TCML.l"
{return HSCROLL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "TCML.l"
{return SELCHANGE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "TCML.l"
{return TABACTIVE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "TCML.l"
{return ENTER;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "TCML.l"
{return ESC;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "TCML.l"
{return FONT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "TCML.l"
{return TIPFONT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "TCML.l"
{return COLOR;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "TCML.l"
{return ESCAPEMENT;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "TCML.l"
{return ORIENTATION;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "TCML.l"
{return WEIGHT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "TCML.l"
{return ITALIC;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "TCML.l"
{return UNDERLINE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "TCML.l"
{return STRIKEOUT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "TCML.l"
{return CHARSET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "TCML.l"
{return OUTPRECISION;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "TCML.l"
{return CLIPPRECISION;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "TCML.l"
{return QUALITY;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "TCML.l"
{return PITCHANDFAMILY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "TCML.l"
{return FACENAME;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "TCML.l"
{return FACECLR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "TCML.l"
{return METER;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "TCML.l"
{return SUB;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "TCML.l"
{return SUPER;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "TCML.l"
{return SUPERLEVEL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "TCML.l"
{return TOOLTIP;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "TCML.l"
{return PASSWORD;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "TCML.l"
{return STATEBUTTON;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "TCML.l"
{/*Eat up all white characters*/}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "TCML.l"
{TCMLlval.integer_value = atoi(TCMLtext); return INT_NUM;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "TCML.l"
{strcpy(TCMLlval.string_value, yytext); return IDENTIFIER;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "TCML.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_COMMENT):
case YY_STATE_EOF(IN_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 399 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 399 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 398);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
#ifdef __cplusplus
extern "C"
{
extern int isatty YY_PROTO(( int ));
}
#else
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 156 "TCML.l"

